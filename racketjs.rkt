#lang racket

(require "js-ast.rkt")

(module+ test
  (require rackunit))

(define (list-symbols->list-strings lst)
  (map symbol->js-compatible-string lst))

(define (is-true expr)
  (Unary 'NEG
         (Binary 'IS_IDENTICAL
                 (Literal #f)
                 expr)))

(define-values (symbol->js-compatible-string js-compatible-string->symbol)
  (let ([rkt '("_" "/" "?" "!" "-" "%" ">" "<" "=" "." "*" "+" "-")]
        [js '("_U_" "_SLASH_" "_QUESTION_" "_IMPORTANT_" "_H_" "_PERCENT_" "_GREATER_" "_LESS_" "_EQUAL_" "_DOT_" "_TIMES_" "_PLUS_" "_MINUS_")])  
    (define (transform pattern change fn-start fn-end name)
      (let loop ([pattern pattern]
                 [change change]
                 [str (fn-start name)])
        (if (empty? pattern)
            (fn-end str)
            (loop
             (rest pattern)
             (rest change)
             (string-replace str (first pattern) (first change))))))
    (values
     (curry transform rkt js symbol->string values)
     (curry transform js rkt values string->symbol))))

(module+ test
  (check-equal? (symbol->js-compatible-string 'string?) "string_QUESTION_")
  (check-equal? (symbol->js-compatible-string 'hash-add!) "hash_H_add_IMPORTANT_")
  (check-equal? (js-compatible-string->symbol "abc_H__U_") 'abc-_)
)

;; funtion-scope a hash map symbol -> (listof string)

;; module-scope a hash map symbol -> (listof symbol) indicating the module level
;; binding including the current module.

;; module-provide
(struct Context (function-scope module-scope module-provide))

(define (context #:function-scope [function-scope #hash()]
                 #:module-scope [module-scope #hash()]
                 #:module-provide [module-provide #hash()])
  (Context function-scope module-scope module-provide))

(define (coerce-list elem)
  (if (list? elem)
      elem
      (list elem)))

(define (get-binding-path ctxt name)
  (coerce-list
   (or
    (hash-ref
     (Context-function-scope ctxt)
     name
     #f)
    (hash-ref
     (Context-module-scope ctxt)
     name
     (thunk (raise (format "The symbol ~a is not in scope" name)))))))

(define (add-local-scope ctxt lst)
  (struct-copy Context ctxt
               [function-scope
                (apply hash-set* (list* (Context-function-scope ctxt) lst))]))

;; (define (remove-binding context sym)
;;   (struct-copy Context context
;;            [function-scope (hash-remove (Context-function-scope context) sym)]))

;; (define (add-binding context sym)
;;   (struct-copy Context context
;;            [scope (set-add (Context-scope context) sym)]))

(define (literal? expr)
  (or (boolean? expr)
      (string? expr)
      (number? expr)))

;; scope : Context
;; maintaint a mapping of variable (when we introduce new names)
(define (emit scope expr)
  (match expr

    [(? symbol?)
     (VariableAccess (get-binding-path scope expr))]

    [(list 'quote (? literal? expr))
     (Literal expr)]

    [(list 'quote (? empty? expr))
     (VariableAccess '("window" "racketjs" "module" "racketjs" "empty"))]

    ;;[(list 'quote (? list? expr))

    [(list 'quote (? symbol? expr))
     (New (FunctionCall
           (VariableAccess '("window" "racketjs" "Symbol"))
           (list (symbol->js-compatible-string expr))))]

    [(list-rest 'lambda args body)
     ;;TODO: use the arguments of js function to catch rest arg
     (FunctionExpr
      (list-symbols->list-strings args)
      (let ([scope (add-local-scope scope
                                         (flatten
                                          (map
                                           (lambda (sym) (list sym (symbol->js-compatible-string sym)))
                                           args)))])
        (let loop ([exprs body]
                   [result (list)])
          (if (empty? exprs)
              (if (empty? result)
                  empty
                  (reverse
                   (cons
                    (Return
                     (first result))
                    (rest result))))
              (loop
               (rest exprs)
               (cons
                (emit scope (first exprs))
                result))))))]

    [(list-rest 'begin body)
     (FunctionCall
      (FunctionExpr empty (map (curry emit scope)  body))
      empty)]

    [(list-rest 'begin0 first body)
     (FunctionCall
      (FunctionExpr '("begin0")
                    (append
                     (map (curry emit scope) body)
                     (list
                      (Return (VariableAccess '("begin0"))))))
      (emit scope first))]

    [(list 'if test then else)
     (ConditionalOp
      (is-true (emit scope test))
      (emit scope then)
      (emit scope else))]

    [(list-rest '#%app id args)
     (FunctionCall (VariableAccess (get-binding-path scope id))
                   (map (curry emit scope) args))]

    ;; no change in scope? (local / non local)
    [(list 'define-values (list arg) expr)
     (Assign
      (VariableAccess (list (symbol->string arg)))
      (emit scope expr))]

     [(list 'define-values args (list-rest 'values exprs))
      (map
       (lambda (arg expr)
         (Assign
          (VariableAccess (list (symbol->string arg)))
          (emit scope expr)))
       args
       exprs)]

     ;;  [(list 'let-values args (list-rest 'values exprs))
     ;; Need to create a (function (...) { ...; return ...;})()

     [(list 'module name 'racket/base (list-rest '#%module-begin (list-rest 'module _) body))
      (emit-module scope name body)]

     [(list-rest (or '#%provide '#%require) _)
      #f]

     [_ (raise (format "unknown ~a" expr))]))

(define (list-subtract lst lst0)
  (set->list
   (set-subtract
    (list->set lst)
    (list->set lst0))))

(define (symbol-append sym sym0)
  (string->symbol
   (string-append
    (symbol->string sym)
    (symbol->string sym0))))

(define base-exports
  (apply
   hash
   (foldr
    (lambda (sym sum)
       (cons
	sym
	(cons
	 (list "window" "racketjs" "module" "racketjs" (symbol->js-compatible-string sym))
	 sum)))
    empty
    '(+ empty list cons first rest car cdr list? empty? pair? number? string? symbol?))))

(define (emit-module scope module-name stmts)
  (define complete-module-name (list "window" "racketjs" "module" (symbol->js-compatible-string module-name)))
  (define module-definition-names
    (flatten
     (map
      (match-lambda
       [(list 'define-values args _)
        args]
       [_ '()])
      stmts)))
  (define provides
    (let ([provided (make-hash)])
      (for ([stmt stmts])
        (match stmt
          [(list '#%provide phaseless-spec)
           (match phaseless-spec
             [(? symbol? sym)
              (hash-set! provided sym sym)]
             [(list 'rename (? symbol? local-id) (? symbol? export-id))
              (hash-set! provided local-id export-id)]
             [(list 'all-defined)
              (map (lambda (sym) (hash-set! provided sym sym)) module-definition-names)]
             [(list 'prefix-all-defined (? symbol? prefix-id))
              (map (lambda (sym) (hash-set! provided sym (symbol-append prefix-id sym))) module-definition-names)]
             [(list-rest 'all-defined-except ids)
              (map (lambda (sym) (hash-set! provided sym sym)) (list-subtract module-definition-names ids))]
             [(list-rest 'prefix-all-defined-except (? symbol? prefix-id) ids)
              (map (lambda (sym) (hash-set! provided sym (symbol-append prefix-id sym))) (list-subtract module-definition-names ids))]
             [_ (void)])]
          [_ (void)]))
      (make-immutable-hash (hash->list provided))))
;;  (define required ...)
  (define module-scope (context
                        #:module-scope ; add required elements
                        (apply
                         hash-set*
                         (list*
                          base-exports
                          (flatten
                           (map
                            (lambda (name) (let ([n (symbol->js-compatible-string name)]) (cons n n)))
                            module-definition-names))))))
  (define emit-stmts
    (flatten
     (filter values ; remove #f emit return
             (map
              (curry emit module-scope)
              stmts))))
  (Assign
   (VariableAccess complete-module-name)
   (FunctionCall
    (FunctionExpr
     empty
     (append
      (map
       (lambda (name)
         (VariableDcl (symbol->string name) (Null)))
       module-definition-names)
      emit-stmts
      (list
       (Return
        (ObjectExpr
         (for/list ([(k v) (in-hash provides)])
           (cons
            (symbol->js-compatible-string k)
            (Literal (symbol->js-compatible-string v)))))))))
    empty)))

;; liste des binding de racket/base (variable, syntax)
;;   (0
;;    (* (#<module-path-index>))
;;    (+ (#<module-path-index>))
;;    (- (#<module-path-index>))
;;    (/ (#<module-path-index>))
;;    (< (#<module-path-index>))
;;    (<= (#<module-path-index>))
;;    (= (#<module-path-index>))
;;    (> (#<module-path-index>))
;;    (>= (#<module-path-index>))
;;    (abort-current-continuation (#<module-path-index>))
;;    (abs (#<module-path-index>))
;;    (absolute-path? (#<module-path-index>))
;;    (acos (#<module-path-index>))
;;    (add1 (#<module-path-index>))
;;    (alarm-evt (#<module-path-index>))
;;    (always-evt (#<module-path-index>))
;;    (andmap (#<module-path-index>))
;;    (angle (#<module-path-index>))
;;    (append (#<module-path-index>))
;;    (arithmetic-shift (#<module-path-index>))
;;    (arity-at-least-value (#<module-path-index>))
;;    (arity-at-least? (#<module-path-index>))
;;    (asin (#<module-path-index>))
;;    (assf (#<module-path-index>))
;;    (assoc (#<module-path-index>))
;;    (assq (#<module-path-index>))
;;    (assv (#<module-path-index>))
;;    (atan (#<module-path-index>))
;;    (banner (#<module-path-index>))
;;    (bitwise-and (#<module-path-index>))
;;    (bitwise-bit-field (#<module-path-index>))
;;    (bitwise-bit-set? (#<module-path-index>))
;;    (bitwise-ior (#<module-path-index>))
;;    (bitwise-not (#<module-path-index>))
;;    (bitwise-xor (#<module-path-index>))
;;    (boolean? (#<module-path-index>))
;;    (bound-identifier=? (#<module-path-index>))
;;    (box (#<module-path-index>))
;;    (box-cas! (#<module-path-index>))
;;    (box-immutable (#<module-path-index>))
;;    (box? (#<module-path-index>))
;;    (break-enabled (#<module-path-index>))
;;    (break-thread (#<module-path-index>))
;;    (build-list (#<module-path-index>))
;;    (build-path (#<module-path-index>))
;;    (build-path/convention-type (#<module-path-index>))
;;    (build-string (#<module-path-index>))
;;    (build-vector (#<module-path-index>))
;;    (byte-pregexp (#<module-path-index>))
;;    (byte-pregexp? (#<module-path-index>))
;;    (byte-ready? (#<module-path-index>))
;;    (byte-regexp (#<module-path-index>))
;;    (byte-regexp? (#<module-path-index>))
;;    (byte? (#<module-path-index>))
;;    (bytes (#<module-path-index>))
;;    (bytes->immutable-bytes (#<module-path-index>))
;;    (bytes->list (#<module-path-index>))
;;    (bytes->path (#<module-path-index>))
;;    (bytes->path-element (#<module-path-index>))
;;    (bytes->string/latin-1 (#<module-path-index>))
;;    (bytes->string/locale (#<module-path-index>))
;;    (bytes->string/utf-8 (#<module-path-index>))
;;    (bytes-append (#<module-path-index>))
;;    (bytes-close-converter (#<module-path-index>))
;;    (bytes-convert (#<module-path-index>))
;;    (bytes-convert-end (#<module-path-index>))
;;    (bytes-converter? (#<module-path-index>))
;;    (bytes-copy (#<module-path-index>))
;;    (bytes-copy! (#<module-path-index>))
;;    (bytes-environment-variable-name? (#<module-path-index>))
;;    (bytes-fill! (#<module-path-index>))
;;    (bytes-length (#<module-path-index>))
;;    (bytes-open-converter (#<module-path-index>))
;;    (bytes-ref (#<module-path-index>))
;;    (bytes-set! (#<module-path-index>))
;;    (bytes-utf-8-index (#<module-path-index>))
;;    (bytes-utf-8-length (#<module-path-index>))
;;    (bytes-utf-8-ref (#<module-path-index>))
;;    (bytes<? (#<module-path-index>))
;;    (bytes=? (#<module-path-index>))
;;    (bytes>? (#<module-path-index>))
;;    (bytes? (#<module-path-index>))
;;    (caaaar (#<module-path-index>))
;;    (caaadr (#<module-path-index>))
;;    (caaar (#<module-path-index>))
;;    (caadar (#<module-path-index>))
;;    (caaddr (#<module-path-index>))
;;    (caadr (#<module-path-index>))
;;    (caar (#<module-path-index>))
;;    (cadaar (#<module-path-index>))
;;    (cadadr (#<module-path-index>))
;;    (cadar (#<module-path-index>))
;;    (caddar (#<module-path-index>))
;;    (cadddr (#<module-path-index>))
;;    (caddr (#<module-path-index>))
;;    (cadr (#<module-path-index>))
;;    (call-in-nested-thread (#<module-path-index>))
;;    (call-with-break-parameterization (#<module-path-index>))
;;    (call-with-composable-continuation (#<module-path-index>))
;;    (call-with-continuation-barrier (#<module-path-index>))
;;    (call-with-continuation-prompt (#<module-path-index>))
;;    (call-with-current-continuation (#<module-path-index>))
;;    (call-with-default-reading-parameterization (#<module-path-index>))
;;    (call-with-escape-continuation (#<module-path-index>))
;;    (call-with-exception-handler (#<module-path-index>))
;;    (call-with-immediate-continuation-mark (#<module-path-index>))
;;    (call-with-parameterization (#<module-path-index>))
;;    (call-with-semaphore (#<module-path-index>))
;;    (call-with-semaphore/enable-break (#<module-path-index>))
;;    (call-with-values (#<module-path-index>))
;;    (call/cc (#<module-path-index>))
;;    (call/ec (#<module-path-index>))
;;    (car (#<module-path-index>))
;;    (cdaaar (#<module-path-index>))
;;    (cdaadr (#<module-path-index>))
;;    (cdaar (#<module-path-index>))
;;    (cdadar (#<module-path-index>))
;;    (cdaddr (#<module-path-index>))
;;    (cdadr (#<module-path-index>))
;;    (cdar (#<module-path-index>))
;;    (cddaar (#<module-path-index>))
;;    (cddadr (#<module-path-index>))
;;    (cddar (#<module-path-index>))
;;    (cdddar (#<module-path-index>))
;;    (cddddr (#<module-path-index>))
;;    (cdddr (#<module-path-index>))
;;    (cddr (#<module-path-index>))
;;    (cdr (#<module-path-index>))
;;    (ceiling (#<module-path-index>))
;;    (channel-get (#<module-path-index>))
;;    (channel-put (#<module-path-index>))
;;    (channel-put-evt (#<module-path-index>))
;;    (channel-put-evt? (#<module-path-index>))
;;    (channel-try-get (#<module-path-index>))
;;    (channel? (#<module-path-index>))
;;    (chaperone-box (#<module-path-index>))
;;    (chaperone-channel (#<module-path-index>))
;;    (chaperone-continuation-mark-key (#<module-path-index>))
;;    (chaperone-evt (#<module-path-index>))
;;    (chaperone-hash (#<module-path-index>))
;;    (chaperone-of? (#<module-path-index>))
;;    (chaperone-procedure (#<module-path-index>))
;;    (chaperone-prompt-tag (#<module-path-index>))
;;    (chaperone-struct (#<module-path-index>))
;;    (chaperone-struct-type (#<module-path-index>))
;;    (chaperone-vector (#<module-path-index>))
;;    (chaperone? (#<module-path-index>))
;;    (char->integer (#<module-path-index>))
;;    (char-alphabetic? (#<module-path-index>))
;;    (char-blank? (#<module-path-index>))
;;    (char-ci<=? (#<module-path-index>))
;;    (char-ci<? (#<module-path-index>))
;;    (char-ci=? (#<module-path-index>))
;;    (char-ci>=? (#<module-path-index>))
;;    (char-ci>? (#<module-path-index>))
;;    (char-downcase (#<module-path-index>))
;;    (char-foldcase (#<module-path-index>))
;;    (char-general-category (#<module-path-index>))
;;    (char-graphic? (#<module-path-index>))
;;    (char-iso-control? (#<module-path-index>))
;;    (char-lower-case? (#<module-path-index>))
;;    (char-numeric? (#<module-path-index>))
;;    (char-punctuation? (#<module-path-index>))
;;    (char-ready? (#<module-path-index>))
;;    (char-symbolic? (#<module-path-index>))
;;    (char-title-case? (#<module-path-index>))
;;    (char-titlecase (#<module-path-index>))
;;    (char-upcase (#<module-path-index>))
;;    (char-upper-case? (#<module-path-index>))
;;    (char-utf-8-length (#<module-path-index>))
;;    (char-whitespace? (#<module-path-index>))
;;    (char<=? (#<module-path-index>))
;;    (char<? (#<module-path-index>))
;;    (char=? (#<module-path-index>))
;;    (char>=? (#<module-path-index>))
;;    (char>? (#<module-path-index>))
;;    (char? (#<module-path-index>))
;;    (check-duplicate-identifier (#<module-path-index>))
;;    (checked-procedure-check-and-extract (#<module-path-index>))
;;    (choice-evt (#<module-path-index>))
;;    (cleanse-path (#<module-path-index>))
;;    (close-input-port (#<module-path-index>))
;;    (close-output-port (#<module-path-index>))
;;    (collect-garbage (#<module-path-index>))
;;    (collection-file-path (#<module-path-index>))
;;    (collection-path (#<module-path-index>))
;;    (compile (#<module-path-index>))
;;    (compile-allow-set!-undefined (#<module-path-index>))
;;    (compile-context-preservation-enabled (#<module-path-index>))
;;    (compile-enforce-module-constants (#<module-path-index>))
;;    (compile-syntax (#<module-path-index>))
;;    (compiled-expression? (#<module-path-index>))
;;    (compiled-module-expression? (#<module-path-index>))
;;    (complete-path? (#<module-path-index>))
;;    (complex? (#<module-path-index>))
;;    (compose (#<module-path-index>))
;;    (compose1 (#<module-path-index>))
;;    (cons (#<module-path-index>))
;;    (continuation-mark-key? (#<module-path-index>))
;;    (continuation-mark-set->context (#<module-path-index>))
;;    (continuation-mark-set->list (#<module-path-index>))
;;    (continuation-mark-set->list* (#<module-path-index>))
;;    (continuation-mark-set-first (#<module-path-index>))
;;    (continuation-mark-set? (#<module-path-index>))
;;    (continuation-marks (#<module-path-index>))
;;    (continuation-prompt-available? (#<module-path-index>))
;;    (continuation-prompt-tag? (#<module-path-index>))
;;    (continuation? (#<module-path-index>))
;;    (copy-file (#<module-path-index>))
;;    (cos (#<module-path-index>))
;;    (current-break-parameterization (#<module-path-index>))
;;    (current-code-inspector (#<module-path-index>))
;;    (current-command-line-arguments (#<module-path-index>))
;;    (current-compile (#<module-path-index>))
;;    (current-compiled-file-roots (#<module-path-index>))
;;    (current-continuation-marks (#<module-path-index>))
;;    (current-custodian (#<module-path-index>))
;;    (current-directory (#<module-path-index>))
;;    (current-directory-for-user (#<module-path-index>))
;;    (current-drive (#<module-path-index>))
;;    (current-environment-variables (#<module-path-index>))
;;    (current-error-port (#<module-path-index>))
;;    (current-eval (#<module-path-index>))
;;    (current-evt-pseudo-random-generator (#<module-path-index>))
;;    (current-gc-milliseconds (#<module-path-index>))
;;    (current-get-interaction-input-port (#<module-path-index>))
;;    (current-inexact-milliseconds (#<module-path-index>))
;;    (current-input-port (#<module-path-index>))
;;    (current-inspector (#<module-path-index>))
;;    (current-library-collection-links (#<module-path-index>))
;;    (current-library-collection-paths (#<module-path-index>))
;;    (current-load (#<module-path-index>))
;;    (current-load-extension (#<module-path-index>))
;;    (current-load-relative-directory (#<module-path-index>))
;;    (current-load/use-compiled (#<module-path-index>))
;;    (current-locale (#<module-path-index>))
;;    (current-logger (#<module-path-index>))
;;    (current-memory-use (#<module-path-index>))
;;    (current-milliseconds (#<module-path-index>))
;;    (current-module-declare-name (#<module-path-index>))
;;    (current-module-declare-source (#<module-path-index>))
;;    (current-module-name-resolver (#<module-path-index>))
;;    (current-module-path-for-load (#<module-path-index>))
;;    (current-namespace (#<module-path-index>))
;;    (current-output-port (#<module-path-index>))
;;    (current-parameterization (#<module-path-index>))
;;    (current-preserved-thread-cell-values (#<module-path-index>))
;;    (current-print (#<module-path-index>))
;;    (current-process-milliseconds (#<module-path-index>))
;;    (current-prompt-read (#<module-path-index>))
;;    (current-pseudo-random-generator (#<module-path-index>))
;;    (current-read-interaction (#<module-path-index>))
;;    (current-reader-guard (#<module-path-index>))
;;    (current-readtable (#<module-path-index>))
;;    (current-seconds (#<module-path-index>))
;;    (current-security-guard (#<module-path-index>))
;;    (current-subprocess-custodian-mode (#<module-path-index>))
;;    (current-thread (#<module-path-index>))
;;    (current-thread-group (#<module-path-index>))
;;    (current-thread-initial-stack-size (#<module-path-index>))
;;    (current-write-relative-directory (#<module-path-index>))
;;    (custodian-box-value (#<module-path-index>))
;;    (custodian-box? (#<module-path-index>))
;;    (custodian-limit-memory (#<module-path-index>))
;;    (custodian-managed-list (#<module-path-index>))
;;    (custodian-memory-accounting-available? (#<module-path-index>))
;;    (custodian-require-memory (#<module-path-index>))
;;    (custodian-shutdown-all (#<module-path-index>))
;;    (custodian? (#<module-path-index>))
;;    (custom-print-quotable-accessor (#<module-path-index>))
;;    (custom-print-quotable? (#<module-path-index>))
;;    (custom-write-accessor (#<module-path-index>))
;;    (custom-write? (#<module-path-index>))
;;    (date*-nanosecond (#<module-path-index>))
;;    (date*-time-zone-name (#<module-path-index>))
;;    (date*? (#<module-path-index>))
;;    (date-day (#<module-path-index>))
;;    (date-dst? (#<module-path-index>))
;;    (date-hour (#<module-path-index>))
;;    (date-minute (#<module-path-index>))
;;    (date-month (#<module-path-index>))
;;    (date-second (#<module-path-index>))
;;    (date-time-zone-offset (#<module-path-index>))
;;    (date-week-day (#<module-path-index>))
;;    (date-year (#<module-path-index>))
;;    (date-year-day (#<module-path-index>))
;;    (date? (#<module-path-index>))
;;    (datum->syntax (#<module-path-index>))
;;    (datum-intern-literal (#<module-path-index>))
;;    (default-continuation-prompt-tag (#<module-path-index>))
;;    (delete-directory (#<module-path-index>))
;;    (delete-file (#<module-path-index>))
;;    (denominator (#<module-path-index>))
;;    (directory-exists? (#<module-path-index>))
;;    (directory-list (#<module-path-index>))
;;    (display (#<module-path-index>))
;;    (displayln (#<module-path-index>))
;;    (double-flonum? (#<module-path-index>))
;;    (dump-memory-stats (#<module-path-index>))
;;    (dynamic-require (#<module-path-index>))
;;    (dynamic-require-for-syntax (#<module-path-index>))
;;    (dynamic-wind (#<module-path-index>))
;;    (environment-variables-copy (#<module-path-index>))
;;    (environment-variables-names (#<module-path-index>))
;;    (environment-variables-ref (#<module-path-index>))
;;    (environment-variables-set! (#<module-path-index>))
;;    (environment-variables? (#<module-path-index>))
;;    (eof (#<module-path-index>))
;;    (eof-object? (#<module-path-index>))
;;    (ephemeron-value (#<module-path-index>))
;;    (ephemeron? (#<module-path-index>))
;;    (eprintf (#<module-path-index>))
;;    (eq-hash-code (#<module-path-index>))
;;    (eq? (#<module-path-index>))
;;    (equal-hash-code (#<module-path-index>))
;;    (equal-secondary-hash-code (#<module-path-index>))
;;    (equal? (#<module-path-index>))
;;    (equal?/recur (#<module-path-index>))
;;    (eqv-hash-code (#<module-path-index>))
;;    (eqv? (#<module-path-index>))
;;    (error (#<module-path-index>))
;;    (error-display-handler (#<module-path-index>))
;;    (error-escape-handler (#<module-path-index>))
;;    (error-print-context-length (#<module-path-index>))
;;    (error-print-source-location (#<module-path-index>))
;;    (error-print-width (#<module-path-index>))
;;    (error-value->string-handler (#<module-path-index>))
;;    (eval (#<module-path-index>))
;;    (eval-jit-enabled (#<module-path-index>))
;;    (eval-syntax (#<module-path-index>))
;;    (even? (#<module-path-index>))
;;    (evt? (#<module-path-index>))
;;    (exact->inexact (#<module-path-index>))
;;    (exact-integer? (#<module-path-index>))
;;    (exact-nonnegative-integer? (#<module-path-index>))
;;    (exact-positive-integer? (#<module-path-index>))
;;    (exact? (#<module-path-index>))
;;    (executable-yield-handler (#<module-path-index>))
;;    (exit (#<module-path-index>))
;;    (exit-handler (#<module-path-index>))
;;    (exn-continuation-marks (#<module-path-index>))
;;    (exn-message (#<module-path-index>))
;;    (exn:break-continuation (#<module-path-index>))
;;    (exn:break:hang-up? (#<module-path-index>))
;;    (exn:break:terminate? (#<module-path-index>))
;;    (exn:break? (#<module-path-index>))
;;    (exn:fail:contract:arity? (#<module-path-index>))
;;    (exn:fail:contract:continuation? (#<module-path-index>))
;;    (exn:fail:contract:divide-by-zero? (#<module-path-index>))
;;    (exn:fail:contract:non-fixnum-result? (#<module-path-index>))
;;    (exn:fail:contract:variable-id (#<module-path-index>))
;;    (exn:fail:contract:variable? (#<module-path-index>))
;;    (exn:fail:contract? (#<module-path-index>))
;;    (exn:fail:filesystem:errno-errno (#<module-path-index>))
;;    (exn:fail:filesystem:errno? (#<module-path-index>))
;;    (exn:fail:filesystem:exists? (#<module-path-index>))
;;    (exn:fail:filesystem:missing-module-path (#<module-path-index>))
;;    (exn:fail:filesystem:missing-module? (#<module-path-index>))
;;    (exn:fail:filesystem:version? (#<module-path-index>))
;;    (exn:fail:filesystem? (#<module-path-index>))
;;    (exn:fail:network:errno-errno (#<module-path-index>))
;;    (exn:fail:network:errno? (#<module-path-index>))
;;    (exn:fail:network? (#<module-path-index>))
;;    (exn:fail:out-of-memory? (#<module-path-index>))
;;    (exn:fail:read-srclocs (#<module-path-index>))
;;    (exn:fail:read:eof? (#<module-path-index>))
;;    (exn:fail:read:non-char? (#<module-path-index>))
;;    (exn:fail:read? (#<module-path-index>))
;;    (exn:fail:syntax-exprs (#<module-path-index>))
;;    (exn:fail:syntax:missing-module-path (#<module-path-index>))
;;    (exn:fail:syntax:missing-module? (#<module-path-index>))
;;    (exn:fail:syntax:unbound? (#<module-path-index>))
;;    (exn:fail:syntax? (#<module-path-index>))
;;    (exn:fail:unsupported? (#<module-path-index>))
;;    (exn:fail:user? (#<module-path-index>))
;;    (exn:fail? (#<module-path-index>))
;;    (exn:missing-module-accessor (#<module-path-index>))
;;    (exn:missing-module? (#<module-path-index>))
;;    (exn:srclocs-accessor (#<module-path-index>))
;;    (exn:srclocs? (#<module-path-index>))
;;    (exn? (#<module-path-index>))
;;    (exp (#<module-path-index>))
;;    (expand (#<module-path-index>))
;;    (expand-once (#<module-path-index>))
;;    (expand-syntax (#<module-path-index>))
;;    (expand-syntax-once (#<module-path-index>))
;;    (expand-syntax-to-top-form (#<module-path-index>))
;;    (expand-to-top-form (#<module-path-index>))
;;    (expand-user-path (#<module-path-index>))
;;    (explode-path (#<module-path-index>))
;;    (expt (#<module-path-index>))
;;    (file-exists? (#<module-path-index>))
;;    (file-or-directory-identity (#<module-path-index>))
;;    (file-or-directory-modify-seconds (#<module-path-index>))
;;    (file-or-directory-permissions (#<module-path-index>))
;;    (file-position (#<module-path-index>))
;;    (file-position* (#<module-path-index>))
;;    (file-size (#<module-path-index>))
;;    (file-stream-buffer-mode (#<module-path-index>))
;;    (file-stream-port? (#<module-path-index>))
;;    (file-truncate (#<module-path-index>))
;;    (filesystem-change-evt (#<module-path-index>))
;;    (filesystem-change-evt-cancel (#<module-path-index>))
;;    (filesystem-change-evt? (#<module-path-index>))
;;    (filesystem-root-list (#<module-path-index>))
;;    (filter (#<module-path-index>))
;;    (find-executable-path (#<module-path-index>))
;;    (find-library-collection-links (#<module-path-index>))
;;    (find-library-collection-paths (#<module-path-index>))
;;    (find-system-path (#<module-path-index>))
;;    (findf (#<module-path-index>))
;;    (fixnum? (#<module-path-index>))
;;    (floating-point-bytes->real (#<module-path-index>))
;;    (flonum? (#<module-path-index>))
;;    (floor (#<module-path-index>))
;;    (flush-output (#<module-path-index>))
;;    (foldl (#<module-path-index>))
;;    (foldr (#<module-path-index>))
;;    (for-each (#<module-path-index>))
;;    (format (#<module-path-index>))
;;    (fprintf (#<module-path-index>))
;;    (free-identifier=? (#<module-path-index>))
;;    (free-label-identifier=? (#<module-path-index>))
;;    (free-template-identifier=? (#<module-path-index>))
;;    (free-transformer-identifier=? (#<module-path-index>))
;;    (gcd (#<module-path-index>))
;;    (generate-temporaries (#<module-path-index>))
;;    (gensym (#<module-path-index>))
;;    (get-output-bytes (#<module-path-index>))
;;    (get-output-string (#<module-path-index>))
;;    (getenv (#<module-path-index>))
;;    (global-port-print-handler (#<module-path-index>))
;;    (guard-evt (#<module-path-index>))
;;    (handle-evt (#<module-path-index>))
;;    (handle-evt? (#<module-path-index>))
;;    (hash (#<module-path-index>))
;;    (hash->list (#<module-path-index>))
;;    (hash-clear (#<module-path-index>))
;;    (hash-clear! (#<module-path-index>))
;;    (hash-copy (#<module-path-index>))
;;    (hash-copy-clear (#<module-path-index>))
;;    (hash-count (#<module-path-index>))
;;    (hash-empty? (#<module-path-index>))
;;    (hash-eq? (#<module-path-index>))
;;    (hash-equal? (#<module-path-index>))
;;    (hash-eqv? (#<module-path-index>))
;;    (hash-for-each (#<module-path-index>))
;;    (hash-has-key? (#<module-path-index>))
;;    (hash-iterate-first (#<module-path-index>))
;;    (hash-iterate-key (#<module-path-index>))
;;    (hash-iterate-next (#<module-path-index>))
;;    (hash-iterate-value (#<module-path-index>))
;;    (hash-keys (#<module-path-index>))
;;    (hash-map (#<module-path-index>))
;;    (hash-placeholder? (#<module-path-index>))
;;    (hash-ref (#<module-path-index>))
;;    (hash-ref! (#<module-path-index>))
;;    (hash-remove (#<module-path-index>))
;;    (hash-remove! (#<module-path-index>))
;;    (hash-set (#<module-path-index>))
;;    (hash-set! (#<module-path-index>))
;;    (hash-set* (#<module-path-index>))
;;    (hash-set*! (#<module-path-index>))
;;    (hash-update (#<module-path-index>))
;;    (hash-update! (#<module-path-index>))
;;    (hash-values (#<module-path-index>))
;;    (hash-weak? (#<module-path-index>))
;;    (hash? (#<module-path-index>))
;;    (hasheq (#<module-path-index>))
;;    (hasheqv (#<module-path-index>))
;;    (identifier-binding (#<module-path-index>))
;;    (identifier-binding-symbol (#<module-path-index>))
;;    (identifier-label-binding (#<module-path-index>))
;;    (identifier-prune-lexical-context (#<module-path-index>))
;;    (identifier-prune-to-source-module (#<module-path-index>))
;;    (identifier-remove-from-definition-context (#<module-path-index>))
;;    (identifier-template-binding (#<module-path-index>))
;;    (identifier-transformer-binding (#<module-path-index>))
;;    (identifier? (#<module-path-index>))
;;    (imag-part (#<module-path-index>))
;;    (immutable? (#<module-path-index>))
;;    (impersonate-box (#<module-path-index>))
;;    (impersonate-channel (#<module-path-index>))
;;    (impersonate-continuation-mark-key (#<module-path-index>))
;;    (impersonate-hash (#<module-path-index>))
;;    (impersonate-procedure (#<module-path-index>))
;;    (impersonate-prompt-tag (#<module-path-index>))
;;    (impersonate-struct (#<module-path-index>))
;;    (impersonate-vector (#<module-path-index>))
;;    (impersonator-ephemeron (#<module-path-index>))
;;    (impersonator-of? (#<module-path-index>))
;;    (impersonator-prop:application-mark (#<module-path-index>))
;;    (impersonator-property-accessor-procedure? (#<module-path-index>))
;;    (impersonator-property? (#<module-path-index>))
;;    (impersonator? (#<module-path-index>))
;;    (in-cycle (#<module-path-index>))
;;    (in-hash (#<module-path-index>))
;;    (in-hash-keys (#<module-path-index>))
;;    (in-hash-pairs (#<module-path-index>))
;;    (in-hash-values (#<module-path-index>))
;;    (in-parallel (#<module-path-index>))
;;    (in-sequences (#<module-path-index>))
;;    (in-values*-sequence (#<module-path-index>))
;;    (in-values-sequence (#<module-path-index>))
;;    (inexact->exact (#<module-path-index>))
;;    (inexact-real? (#<module-path-index>))
;;    (inexact? (#<module-path-index>))
;;    (input-port? (#<module-path-index>))
;;    (inspector? (#<module-path-index>))
;;    (integer->char (#<module-path-index>))
;;    (integer->integer-bytes (#<module-path-index>))
;;    (integer-bytes->integer (#<module-path-index>))
;;    (integer-length (#<module-path-index>))
;;    (integer-sqrt (#<module-path-index>))
;;    (integer-sqrt/remainder (#<module-path-index>))
;;    (integer? (#<module-path-index>))
;;    (internal-definition-context-seal (#<module-path-index>))
;;    (internal-definition-context? (#<module-path-index>))
;;    (keyword->string (#<module-path-index>))
;;    (keyword-apply (#<module-path-index>))
;;    (keyword<? (#<module-path-index>))
;;    (keyword? (#<module-path-index>))
;;    (kill-thread (#<module-path-index>))
;;    (lcm (#<module-path-index>))
;;    (length (#<module-path-index>))
;;    (liberal-define-context? (#<module-path-index>))
;;    (link-exists? (#<module-path-index>))
;;    (list (#<module-path-index>))
;;    (list* (#<module-path-index>))
;;    (list->bytes (#<module-path-index>))
;;    (list->string (#<module-path-index>))
;;    (list->vector (#<module-path-index>))
;;    (list-ref (#<module-path-index>))
;;    (list-tail (#<module-path-index>))
;;    (list? (#<module-path-index>))
;;    (load (#<module-path-index>))
;;    (load-extension (#<module-path-index>))
;;    (load-on-demand-enabled (#<module-path-index>))
;;    (load-relative (#<module-path-index>))
;;    (load-relative-extension (#<module-path-index>))
;;    (load/cd (#<module-path-index>))
;;    (load/use-compiled (#<module-path-index>))
;;    (local-expand (#<module-path-index>))
;;    (local-expand/capture-lifts (#<module-path-index>))
;;    (local-transformer-expand (#<module-path-index>))
;;    (local-transformer-expand/capture-lifts (#<module-path-index>))
;;    (locale-string-encoding (#<module-path-index>))
;;    (log (#<module-path-index>))
;;    (log-level? (#<module-path-index>))
;;    (log-max-level (#<module-path-index>))
;;    (log-message (#<module-path-index>))
;;    (log-receiver? (#<module-path-index>))
;;    (logger-name (#<module-path-index>))
;;    (logger? (#<module-path-index>))
;;    (magnitude (#<module-path-index>))
;;    (make-arity-at-least (#<module-path-index>))
;;    (make-base-empty-namespace (#<module-path-index>))
;;    (make-base-namespace (#<module-path-index>))
;;    (make-bytes (#<module-path-index>))
;;    (make-channel (#<module-path-index>))
;;    (make-continuation-mark-key (#<module-path-index>))
;;    (make-continuation-prompt-tag (#<module-path-index>))
;;    (make-custodian (#<module-path-index>))
;;    (make-custodian-box (#<module-path-index>))
;;    (make-date (#<module-path-index>))
;;    (make-date* (#<module-path-index>))
;;    (make-derived-parameter (#<module-path-index>))
;;    (make-directory (#<module-path-index>))
;;    (make-do-sequence (#<module-path-index>))
;;    (make-empty-namespace (#<module-path-index>))
;;    (make-environment-variables (#<module-path-index>))
;;    (make-ephemeron (#<module-path-index>))
;;    (make-exn (#<module-path-index>))
;;    (make-exn:break (#<module-path-index>))
;;    (make-exn:break:hang-up (#<module-path-index>))
;;    (make-exn:break:terminate (#<module-path-index>))
;;    (make-exn:fail (#<module-path-index>))
;;    (make-exn:fail:contract (#<module-path-index>))
;;    (make-exn:fail:contract:arity (#<module-path-index>))
;;    (make-exn:fail:contract:continuation (#<module-path-index>))
;;    (make-exn:fail:contract:divide-by-zero (#<module-path-index>))
;;    (make-exn:fail:contract:non-fixnum-result (#<module-path-index>))
;;    (make-exn:fail:contract:variable (#<module-path-index>))
;;    (make-exn:fail:filesystem (#<module-path-index>))
;;    (make-exn:fail:filesystem:errno (#<module-path-index>))
;;    (make-exn:fail:filesystem:exists (#<module-path-index>))
;;    (make-exn:fail:filesystem:missing-module (#<module-path-index>))
;;    (make-exn:fail:filesystem:version (#<module-path-index>))
;;    (make-exn:fail:network (#<module-path-index>))
;;    (make-exn:fail:network:errno (#<module-path-index>))
;;    (make-exn:fail:out-of-memory (#<module-path-index>))
;;    (make-exn:fail:read (#<module-path-index>))
;;    (make-exn:fail:read:eof (#<module-path-index>))
;;    (make-exn:fail:read:non-char (#<module-path-index>))
;;    (make-exn:fail:syntax (#<module-path-index>))
;;    (make-exn:fail:syntax:missing-module (#<module-path-index>))
;;    (make-exn:fail:syntax:unbound (#<module-path-index>))
;;    (make-exn:fail:unsupported (#<module-path-index>))
;;    (make-exn:fail:user (#<module-path-index>))
;;    (make-file-or-directory-link (#<module-path-index>))
;;    (make-hash (#<module-path-index>))
;;    (make-hash-placeholder (#<module-path-index>))
;;    (make-hasheq (#<module-path-index>))
;;    (make-hasheq-placeholder (#<module-path-index>))
;;    (make-hasheqv (#<module-path-index>))
;;    (make-hasheqv-placeholder (#<module-path-index>))
;;    (make-immutable-hash (#<module-path-index>))
;;    (make-immutable-hasheq (#<module-path-index>))
;;    (make-immutable-hasheqv (#<module-path-index>))
;;    (make-impersonator-property (#<module-path-index>))
;;    (make-input-port (#<module-path-index>))
;;    (make-inspector (#<module-path-index>))
;;    (make-keyword-procedure (#<module-path-index>))
;;    (make-known-char-range-list (#<module-path-index>))
;;    (make-log-receiver (#<module-path-index>))
;;    (make-logger (#<module-path-index>))
;;    (make-output-port (#<module-path-index>))
;;    (make-parameter (#<module-path-index>))
;;    (make-phantom-bytes (#<module-path-index>))
;;    (make-pipe (#<module-path-index>))
;;    (make-placeholder (#<module-path-index>))
;;    (make-polar (#<module-path-index>))
;;    (make-prefab-struct (#<module-path-index>))
;;    (make-pseudo-random-generator (#<module-path-index>))
;;    (make-reader-graph (#<module-path-index>))
;;    (make-readtable (#<module-path-index>))
;;    (make-rectangular (#<module-path-index>))
;;    (make-rename-transformer (#<module-path-index>))
;;    (make-resolved-module-path (#<module-path-index>))
;;    (make-security-guard (#<module-path-index>))
;;    (make-semaphore (#<module-path-index>))
;;    (make-set!-transformer (#<module-path-index>))
;;    (make-shared-bytes (#<module-path-index>))
;;    (make-sibling-inspector (#<module-path-index>))
;;    (make-special-comment (#<module-path-index>))
;;    (make-srcloc (#<module-path-index>))
;;    (make-string (#<module-path-index>))
;;    (make-struct-field-accessor (#<module-path-index>))
;;    (make-struct-field-mutator (#<module-path-index>))
;;    (make-struct-type (#<module-path-index>))
;;    (make-struct-type-property (#<module-path-index>))
;;    (make-syntax-delta-introducer (#<module-path-index>))
;;    (make-syntax-introducer (#<module-path-index>))
;;    (make-thread-cell (#<module-path-index>))
;;    (make-thread-group (#<module-path-index>))
;;    (make-vector (#<module-path-index>))
;;    (make-weak-box (#<module-path-index>))
;;    (make-weak-hash (#<module-path-index>))
;;    (make-weak-hasheq (#<module-path-index>))
;;    (make-weak-hasheqv (#<module-path-index>))
;;    (make-will-executor (#<module-path-index>))
;;    (map (#<module-path-index>))
;;    (max (#<module-path-index>))
;;    (mcar (#<module-path-index>))
;;    (mcdr (#<module-path-index>))
;;    (mcons (#<module-path-index>))
;;    (member (#<module-path-index>))
;;    (memf (#<module-path-index>))
;;    (memq (#<module-path-index>))
;;    (memv (#<module-path-index>))
;;    (min (#<module-path-index>))
;;    (module->exports (#<module-path-index>))
;;    (module->imports (#<module-path-index>))
;;    (module->language-info (#<module-path-index>))
;;    (module->namespace (#<module-path-index>))
;;    (module-compiled-cross-phase-persistent? (#<module-path-index>))
;;    (module-compiled-exports (#<module-path-index>))
;;    (module-compiled-imports (#<module-path-index>))
;;    (module-compiled-language-info (#<module-path-index>))
;;    (module-compiled-name (#<module-path-index>))
;;    (module-compiled-submodules (#<module-path-index>))
;;    (module-declared? (#<module-path-index>))
;;    (module-path-index-join (#<module-path-index>))
;;    (module-path-index-resolve (#<module-path-index>))
;;    (module-path-index-split (#<module-path-index>))
;;    (module-path-index-submodule (#<module-path-index>))
;;    (module-path-index? (#<module-path-index>))
;;    (module-path? (#<module-path-index>))
;;    (module-predefined? (#<module-path-index>))
;;    (module-provide-protected? (#<module-path-index>))
;;    (modulo (#<module-path-index>))
;;    (mpair? (#<module-path-index>))
;;    (nack-guard-evt (#<module-path-index>))
;;    (namespace-anchor->empty-namespace (#<module-path-index>))
;;    (namespace-anchor->namespace (#<module-path-index>))
;;    (namespace-anchor? (#<module-path-index>))
;;    (namespace-attach-module (#<module-path-index>))
;;    (namespace-attach-module-declaration (#<module-path-index>))
;;    (namespace-base-phase (#<module-path-index>))
;;    (namespace-mapped-symbols (#<module-path-index>))
;;    (namespace-module-identifier (#<module-path-index>))
;;    (namespace-module-registry (#<module-path-index>))
;;    (namespace-require (#<module-path-index>))
;;    (namespace-require/constant (#<module-path-index>))
;;    (namespace-require/copy (#<module-path-index>))
;;    (namespace-require/expansion-time (#<module-path-index>))
;;    (namespace-set-variable-value! (#<module-path-index>))
;;    (namespace-symbol->identifier (#<module-path-index>))
;;    (namespace-syntax-introduce (#<module-path-index>))
;;    (namespace-undefine-variable! (#<module-path-index>))
;;    (namespace-unprotect-module (#<module-path-index>))
;;    (namespace-variable-value (#<module-path-index>))
;;    (namespace? (#<module-path-index>))
;;    (negative? (#<module-path-index>))
;;    (never-evt (#<module-path-index>))
;;    (newline (#<module-path-index>))
;;    (normal-case-path (#<module-path-index>))
;;    (not (#<module-path-index>))
;;    (null (#<module-path-index>))
;;    (null? (#<module-path-index>))
;;    (number->string (#<module-path-index>))
;;    (number? (#<module-path-index>))
;;    (numerator (#<module-path-index>))
;;    (object-name (#<module-path-index>))
;;    (odd? (#<module-path-index>))
;;    (open-input-bytes (#<module-path-index>))
;;    (open-input-string (#<module-path-index>))
;;    (open-output-bytes (#<module-path-index>))
;;    (open-output-string (#<module-path-index>))
;;    (ormap (#<module-path-index>))
;;    (output-port? (#<module-path-index>))
;;    (pair? (#<module-path-index>))
;;    (parameter-procedure=? (#<module-path-index>))
;;    (parameter? (#<module-path-index>))
;;    (parameterization? (#<module-path-index>))
;;    (path->bytes (#<module-path-index>))
;;    (path->complete-path (#<module-path-index>))
;;    (path->directory-path (#<module-path-index>))
;;    (path->string (#<module-path-index>))
;;    (path-add-suffix (#<module-path-index>))
;;    (path-convention-type (#<module-path-index>))
;;    (path-element->bytes (#<module-path-index>))
;;    (path-element->string (#<module-path-index>))
;;    (path-for-some-system? (#<module-path-index>))
;;    (path-list-string->path-list (#<module-path-index>))
;;    (path-replace-suffix (#<module-path-index>))
;;    (path-string? (#<module-path-index>))
;;    (path<? (#<module-path-index>))
;;    (path? (#<module-path-index>))
;;    (peek-byte (#<module-path-index>))
;;    (peek-byte-or-special (#<module-path-index>))
;;    (peek-bytes (#<module-path-index>))
;;    (peek-bytes! (#<module-path-index>))
;;    (peek-bytes-avail! (#<module-path-index>))
;;    (peek-bytes-avail!* (#<module-path-index>))
;;    (peek-bytes-avail!/enable-break (#<module-path-index>))
;;    (peek-char (#<module-path-index>))
;;    (peek-char-or-special (#<module-path-index>))
;;    (peek-string (#<module-path-index>))
;;    (peek-string! (#<module-path-index>))
;;    (phantom-bytes? (#<module-path-index>))
;;    (pipe-content-length (#<module-path-index>))
;;    (placeholder-get (#<module-path-index>))
;;    (placeholder-set! (#<module-path-index>))
;;    (placeholder? (#<module-path-index>))
;;    (poll-guard-evt (#<module-path-index>))
;;    (port-closed-evt (#<module-path-index>))
;;    (port-closed? (#<module-path-index>))
;;    (port-commit-peeked (#<module-path-index>))
;;    (port-count-lines! (#<module-path-index>))
;;    (port-count-lines-enabled (#<module-path-index>))
;;    (port-counts-lines? (#<module-path-index>))
;;    (port-display-handler (#<module-path-index>))
;;    (port-file-identity (#<module-path-index>))
;;    (port-file-unlock (#<module-path-index>))
;;    (port-next-location (#<module-path-index>))
;;    (port-print-handler (#<module-path-index>))
;;    (port-progress-evt (#<module-path-index>))
;;    (port-provides-progress-evts? (#<module-path-index>))
;;    (port-read-handler (#<module-path-index>))
;;    (port-try-file-lock? (#<module-path-index>))
;;    (port-write-handler (#<module-path-index>))
;;    (port-writes-atomic? (#<module-path-index>))
;;    (port-writes-special? (#<module-path-index>))
;;    (port? (#<module-path-index>))
;;    (positive? (#<module-path-index>))
;;    (prefab-key->struct-type (#<module-path-index>))
;;    (prefab-key? (#<module-path-index>))
;;    (prefab-struct-key (#<module-path-index>))
;;    (pregexp (#<module-path-index>))
;;    (pregexp? (#<module-path-index>))
;;    (primitive-closure? (#<module-path-index>))
;;    (primitive-result-arity (#<module-path-index>))
;;    (primitive? (#<module-path-index>))
;;    (print (#<module-path-index>))
;;    (print-as-expression (#<module-path-index>))
;;    (print-boolean-long-form (#<module-path-index>))
;;    (print-box (#<module-path-index>))
;;    (print-graph (#<module-path-index>))
;;    (print-hash-table (#<module-path-index>))
;;    (print-mpair-curly-braces (#<module-path-index>))
;;    (print-pair-curly-braces (#<module-path-index>))
;;    (print-reader-abbreviations (#<module-path-index>))
;;    (print-struct (#<module-path-index>))
;;    (print-syntax-width (#<module-path-index>))
;;    (print-unreadable (#<module-path-index>))
;;    (print-vector-length (#<module-path-index>))
;;    (printf (#<module-path-index>))
;;    (procedure->method (#<module-path-index>))
;;    (procedure-arity (#<module-path-index>))
;;    (procedure-arity-includes? (#<module-path-index>))
;;    (procedure-arity? (#<module-path-index>))
;;    (procedure-closure-contents-eq? (#<module-path-index>))
;;    (procedure-extract-target (#<module-path-index>))
;;    (procedure-keywords (#<module-path-index>))
;;    (procedure-reduce-arity (#<module-path-index>))
;;    (procedure-reduce-keyword-arity (#<module-path-index>))
;;    (procedure-rename (#<module-path-index>))
;;    (procedure-struct-type? (#<module-path-index>))
;;    (procedure? (#<module-path-index>))
;;    (progress-evt? (#<module-path-index>))
;;    (prop:arity-string (#<module-path-index>))
;;    (prop:checked-procedure (#<module-path-index>))
;;    (prop:custom-print-quotable (#<module-path-index>))
;;    (prop:custom-write (#<module-path-index>))
;;    (prop:equal+hash (#<module-path-index>))
;;    (prop:evt (#<module-path-index>))
;;    (prop:exn:missing-module (#<module-path-index>))
;;    (prop:exn:srclocs (#<module-path-index>))
;;    (prop:impersonator-of (#<module-path-index>))
;;    (prop:input-port (#<module-path-index>))
;;    (prop:liberal-define-context (#<module-path-index>))
;;    (prop:output-port (#<module-path-index>))
;;    (prop:procedure (#<module-path-index>))
;;    (prop:rename-transformer (#<module-path-index>))
;;    (prop:sequence (#<module-path-index>))
;;    (prop:set!-transformer (#<module-path-index>))
;;    (pseudo-random-generator->vector (#<module-path-index>))
;;    (pseudo-random-generator-vector? (#<module-path-index>))
;;    (pseudo-random-generator? (#<module-path-index>))
;;    (putenv (#<module-path-index>))
;;    (quotient (#<module-path-index>))
;;    (quotient/remainder (#<module-path-index>))
;;    (raise (#<module-path-index>))
;;    (raise-argument-error (#<module-path-index>))
;;    (raise-arguments-error (#<module-path-index>))
;;    (raise-arity-error (#<module-path-index>))
;;    (raise-mismatch-error (#<module-path-index>))
;;    (raise-range-error (#<module-path-index>))
;;    (raise-result-error (#<module-path-index>))
;;    (raise-syntax-error (#<module-path-index>))
;;    (raise-type-error (#<module-path-index>))
;;    (raise-user-error (#<module-path-index>))
;;    (random (#<module-path-index>))
;;    (random-seed (#<module-path-index>))
;;    (rational? (#<module-path-index>))
;;    (rationalize (#<module-path-index>))
;;    (read (#<module-path-index>))
;;    (read-accept-bar-quote (#<module-path-index>))
;;    (read-accept-box (#<module-path-index>))
;;    (read-accept-compiled (#<module-path-index>))
;;    (read-accept-dot (#<module-path-index>))
;;    (read-accept-graph (#<module-path-index>))
;;    (read-accept-infix-dot (#<module-path-index>))
;;    (read-accept-lang (#<module-path-index>))
;;    (read-accept-quasiquote (#<module-path-index>))
;;    (read-accept-reader (#<module-path-index>))
;;    (read-byte (#<module-path-index>))
;;    (read-byte-or-special (#<module-path-index>))
;;    (read-bytes (#<module-path-index>))
;;    (read-bytes! (#<module-path-index>))
;;    (read-bytes-avail! (#<module-path-index>))
;;    (read-bytes-avail!* (#<module-path-index>))
;;    (read-bytes-avail!/enable-break (#<module-path-index>))
;;    (read-bytes-line (#<module-path-index>))
;;    (read-case-sensitive (#<module-path-index>))
;;    (read-char (#<module-path-index>))
;;    (read-char-or-special (#<module-path-index>))
;;    (read-curly-brace-as-paren (#<module-path-index>))
;;    (read-decimal-as-inexact (#<module-path-index>))
;;    (read-eval-print-loop (#<module-path-index>))
;;    (read-language (#<module-path-index>))
;;    (read-line (#<module-path-index>))
;;    (read-on-demand-source (#<module-path-index>))
;;    (read-square-bracket-as-paren (#<module-path-index>))
;;    (read-string (#<module-path-index>))
;;    (read-string! (#<module-path-index>))
;;    (read-syntax (#<module-path-index>))
;;    (read-syntax/recursive (#<module-path-index>))
;;    (read/recursive (#<module-path-index>))
;;    (readtable-mapping (#<module-path-index>))
;;    (readtable? (#<module-path-index>))
;;    (real->decimal-string (#<module-path-index>))
;;    (real->double-flonum (#<module-path-index>))
;;    (real->floating-point-bytes (#<module-path-index>))
;;    (real->single-flonum (#<module-path-index>))
;;    (real-part (#<module-path-index>))
;;    (real? (#<module-path-index>))
;;    (regexp (#<module-path-index>))
;;    (regexp-match (#<module-path-index>))
;;    (regexp-match-exact? (#<module-path-index>))
;;    (regexp-match-peek (#<module-path-index>))
;;    (regexp-match-peek-immediate (#<module-path-index>))
;;    (regexp-match-peek-positions (#<module-path-index>))
;;    (regexp-match-peek-positions-immediate (#<module-path-index>))
;;    (regexp-match-peek-positions-immediate/end (#<module-path-index>))
;;    (regexp-match-peek-positions/end (#<module-path-index>))
;;    (regexp-match-positions (#<module-path-index>))
;;    (regexp-match-positions/end (#<module-path-index>))
;;    (regexp-match/end (#<module-path-index>))
;;    (regexp-match? (#<module-path-index>))
;;    (regexp-max-lookbehind (#<module-path-index>))
;;    (regexp-quote (#<module-path-index>))
;;    (regexp-replace (#<module-path-index>))
;;    (regexp-replace* (#<module-path-index>))
;;    (regexp-replace-quote (#<module-path-index>))
;;    (regexp-replaces (#<module-path-index>))
;;    (regexp-split (#<module-path-index>))
;;    (regexp-try-match (#<module-path-index>))
;;    (regexp? (#<module-path-index>))
;;    (relative-path? (#<module-path-index>))
;;    (remainder (#<module-path-index>))
;;    (remove (#<module-path-index>))
;;    (remove* (#<module-path-index>))
;;    (remq (#<module-path-index>))
;;    (remq* (#<module-path-index>))
;;    (remv (#<module-path-index>))
;;    (remv* (#<module-path-index>))
;;    (rename-file-or-directory (#<module-path-index>))
;;    (rename-transformer-target (#<module-path-index>))
;;    (rename-transformer? (#<module-path-index>))
;;    (reroot-path (#<module-path-index>))
;;    (resolve-path (#<module-path-index>))
;;    (resolved-module-path-name (#<module-path-index>))
;;    (resolved-module-path? (#<module-path-index>))
;;    (reverse (#<module-path-index>))
;;    (round (#<module-path-index>))
;;    (seconds->date (#<module-path-index>))
;;    (security-guard? (#<module-path-index>))
;;    (semaphore-peek-evt (#<module-path-index>))
;;    (semaphore-peek-evt? (#<module-path-index>))
;;    (semaphore-post (#<module-path-index>))
;;    (semaphore-try-wait? (#<module-path-index>))
;;    (semaphore-wait (#<module-path-index>))
;;    (semaphore-wait/enable-break (#<module-path-index>))
;;    (semaphore? (#<module-path-index>))
;;    (sequence->stream (#<module-path-index>))
;;    (sequence-generate (#<module-path-index>))
;;    (sequence-generate* (#<module-path-index>))
;;    (sequence? (#<module-path-index>))
;;    (set!-transformer-procedure (#<module-path-index>))
;;    (set!-transformer? (#<module-path-index>))
;;    (set-box! (#<module-path-index>))
;;    (set-mcar! (#<module-path-index>))
;;    (set-mcdr! (#<module-path-index>))
;;    (set-phantom-bytes! (#<module-path-index>))
;;    (set-port-next-location! (#<module-path-index>))
;;    (shared-bytes (#<module-path-index>))
;;    (shell-execute (#<module-path-index>))
;;    (simplify-path (#<module-path-index>))
;;    (sin (#<module-path-index>))
;;    (single-flonum? (#<module-path-index>))
;;    (sleep (#<module-path-index>))
;;    (special-comment-value (#<module-path-index>))
;;    (special-comment? (#<module-path-index>))
;;    (split-path (#<module-path-index>))
;;    (sqrt (#<module-path-index>))
;;    (srcloc->string (#<module-path-index>))
;;    (srcloc-column (#<module-path-index>))
;;    (srcloc-line (#<module-path-index>))
;;    (srcloc-position (#<module-path-index>))
;;    (srcloc-source (#<module-path-index>))
;;    (srcloc-span (#<module-path-index>))
;;    (srcloc? (#<module-path-index>))
;;    (stop-after (#<module-path-index>))
;;    (stop-before (#<module-path-index>))
;;    (string (#<module-path-index>))
;;    (string->bytes/latin-1 (#<module-path-index>))
;;    (string->bytes/locale (#<module-path-index>))
;;    (string->bytes/utf-8 (#<module-path-index>))
;;    (string->immutable-string (#<module-path-index>))
;;    (string->keyword (#<module-path-index>))
;;    (string->list (#<module-path-index>))
;;    (string->number (#<module-path-index>))
;;    (string->path (#<module-path-index>))
;;    (string->path-element (#<module-path-index>))
;;    (string->symbol (#<module-path-index>))
;;    (string->uninterned-symbol (#<module-path-index>))
;;    (string->unreadable-symbol (#<module-path-index>))
;;    (string-append (#<module-path-index>))
;;    (string-ci<=? (#<module-path-index>))
;;    (string-ci<? (#<module-path-index>))
;;    (string-ci=? (#<module-path-index>))
;;    (string-ci>=? (#<module-path-index>))
;;    (string-ci>? (#<module-path-index>))
;;    (string-copy (#<module-path-index>))
;;    (string-copy! (#<module-path-index>))
;;    (string-downcase (#<module-path-index>))
;;    (string-environment-variable-name? (#<module-path-index>))
;;    (string-fill! (#<module-path-index>))
;;    (string-foldcase (#<module-path-index>))
;;    (string-length (#<module-path-index>))
;;    (string-locale-ci<? (#<module-path-index>))
;;    (string-locale-ci=? (#<module-path-index>))
;;    (string-locale-ci>? (#<module-path-index>))
;;    (string-locale-downcase (#<module-path-index>))
;;    (string-locale-upcase (#<module-path-index>))
;;    (string-locale<? (#<module-path-index>))
;;    (string-locale=? (#<module-path-index>))
;;    (string-locale>? (#<module-path-index>))
;;    (string-normalize-nfc (#<module-path-index>))
;;    (string-normalize-nfd (#<module-path-index>))
;;    (string-normalize-nfkc (#<module-path-index>))
;;    (string-normalize-nfkd (#<module-path-index>))
;;    (string-ref (#<module-path-index>))
;;    (string-set! (#<module-path-index>))
;;    (string-titlecase (#<module-path-index>))
;;    (string-upcase (#<module-path-index>))
;;    (string-utf-8-length (#<module-path-index>))
;;    (string<=? (#<module-path-index>))
;;    (string<? (#<module-path-index>))
;;    (string=? (#<module-path-index>))
;;    (string>=? (#<module-path-index>))
;;    (string>? (#<module-path-index>))
;;    (string? (#<module-path-index>))
;;    (struct->vector (#<module-path-index>))
;;    (struct-accessor-procedure? (#<module-path-index>))
;;    (struct-constructor-procedure? (#<module-path-index>))
;;    (struct-info (#<module-path-index>))
;;    (struct-mutator-procedure? (#<module-path-index>))
;;    (struct-predicate-procedure? (#<module-path-index>))
;;    (struct-type-info (#<module-path-index>))
;;    (struct-type-make-constructor (#<module-path-index>))
;;    (struct-type-make-predicate (#<module-path-index>))
;;    (struct-type-property-accessor-procedure? (#<module-path-index>))
;;    (struct-type-property? (#<module-path-index>))
;;    (struct-type? (#<module-path-index>))
;;    (struct:arity-at-least (#<module-path-index>))
;;    (struct:date (#<module-path-index>))
;;    (struct:date* (#<module-path-index>))
;;    (struct:exn (#<module-path-index>))
;;    (struct:exn:break (#<module-path-index>))
;;    (struct:exn:break:hang-up (#<module-path-index>))
;;    (struct:exn:break:terminate (#<module-path-index>))
;;    (struct:exn:fail (#<module-path-index>))
;;    (struct:exn:fail:contract (#<module-path-index>))
;;    (struct:exn:fail:contract:arity (#<module-path-index>))
;;    (struct:exn:fail:contract:continuation (#<module-path-index>))
;;    (struct:exn:fail:contract:divide-by-zero (#<module-path-index>))
;;    (struct:exn:fail:contract:non-fixnum-result (#<module-path-index>))
;;    (struct:exn:fail:contract:variable (#<module-path-index>))
;;    (struct:exn:fail:filesystem (#<module-path-index>))
;;    (struct:exn:fail:filesystem:errno (#<module-path-index>))
;;    (struct:exn:fail:filesystem:exists (#<module-path-index>))
;;    (struct:exn:fail:filesystem:missing-module (#<module-path-index>))
;;    (struct:exn:fail:filesystem:version (#<module-path-index>))
;;    (struct:exn:fail:network (#<module-path-index>))
;;    (struct:exn:fail:network:errno (#<module-path-index>))
;;    (struct:exn:fail:out-of-memory (#<module-path-index>))
;;    (struct:exn:fail:read (#<module-path-index>))
;;    (struct:exn:fail:read:eof (#<module-path-index>))
;;    (struct:exn:fail:read:non-char (#<module-path-index>))
;;    (struct:exn:fail:syntax (#<module-path-index>))
;;    (struct:exn:fail:syntax:missing-module (#<module-path-index>))
;;    (struct:exn:fail:syntax:unbound (#<module-path-index>))
;;    (struct:exn:fail:unsupported (#<module-path-index>))
;;    (struct:exn:fail:user (#<module-path-index>))
;;    (struct:srcloc (#<module-path-index>))
;;    (struct? (#<module-path-index>))
;;    (sub1 (#<module-path-index>))
;;    (subbytes (#<module-path-index>))
;;    (subprocess (#<module-path-index>))
;;    (subprocess-group-enabled (#<module-path-index>))
;;    (subprocess-kill (#<module-path-index>))
;;    (subprocess-pid (#<module-path-index>))
;;    (subprocess-status (#<module-path-index>))
;;    (subprocess-wait (#<module-path-index>))
;;    (subprocess? (#<module-path-index>))
;;    (substring (#<module-path-index>))
;;    (symbol->string (#<module-path-index>))
;;    (symbol-interned? (#<module-path-index>))
;;    (symbol-unreadable? (#<module-path-index>))
;;    (symbol<? (#<module-path-index>))
;;    (symbol? (#<module-path-index>))
;;    (sync (#<module-path-index>))
;;    (sync/enable-break (#<module-path-index>))
;;    (sync/timeout (#<module-path-index>))
;;    (sync/timeout/enable-break (#<module-path-index>))
;;    (syntax->datum (#<module-path-index>))
;;    (syntax->list (#<module-path-index>))
;;    (syntax-arm (#<module-path-index>))
;;    (syntax-column (#<module-path-index>))
;;    (syntax-disarm (#<module-path-index>))
;;    (syntax-e (#<module-path-index>))
;;    (syntax-line (#<module-path-index>))
;;    (syntax-local-bind-syntaxes (#<module-path-index>))
;;    (syntax-local-certifier (#<module-path-index>))
;;    (syntax-local-context (#<module-path-index>))
;;    (syntax-local-expand-expression (#<module-path-index>))
;;    (syntax-local-get-shadower (#<module-path-index>))
;;    (syntax-local-introduce (#<module-path-index>))
;;    (syntax-local-lift-context (#<module-path-index>))
;;    (syntax-local-lift-expression (#<module-path-index>))
;;    (syntax-local-lift-module-end-declaration (#<module-path-index>))
;;    (syntax-local-lift-provide (#<module-path-index>))
;;    (syntax-local-lift-require (#<module-path-index>))
;;    (syntax-local-lift-values-expression (#<module-path-index>))
;;    (syntax-local-make-definition-context (#<module-path-index>))
;;    (syntax-local-make-delta-introducer (#<module-path-index>))
;;    (syntax-local-module-defined-identifiers (#<module-path-index>))
;;    (syntax-local-module-exports (#<module-path-index>))
;;    (syntax-local-module-required-identifiers (#<module-path-index>))
;;    (syntax-local-name (#<module-path-index>))
;;    (syntax-local-phase-level (#<module-path-index>))
;;    (syntax-local-submodules (#<module-path-index>))
;;    (syntax-local-transforming-module-provides? (#<module-path-index>))
;;    (syntax-local-value (#<module-path-index>))
;;    (syntax-local-value/immediate (#<module-path-index>))
;;    (syntax-original? (#<module-path-index>))
;;    (syntax-position (#<module-path-index>))
;;    (syntax-property (#<module-path-index>))
;;    (syntax-property-symbol-keys (#<module-path-index>))
;;    (syntax-protect (#<module-path-index>))
;;    (syntax-rearm (#<module-path-index>))
;;    (syntax-recertify (#<module-path-index>))
;;    (syntax-shift-phase-level (#<module-path-index>))
;;    (syntax-source (#<module-path-index>))
;;    (syntax-source-module (#<module-path-index>))
;;    (syntax-span (#<module-path-index>))
;;    (syntax-taint (#<module-path-index>))
;;    (syntax-tainted? (#<module-path-index>))
;;    (syntax-track-origin (#<module-path-index>))
;;    (syntax-transforming-module-expression? (#<module-path-index>))
;;    (syntax-transforming? (#<module-path-index>))
;;    (syntax? (#<module-path-index>))
;;    (system-big-endian? (#<module-path-index>))
;;    (system-idle-evt (#<module-path-index>))
;;    (system-language+country (#<module-path-index>))
;;    (system-library-subpath (#<module-path-index>))
;;    (system-path-convention-type (#<module-path-index>))
;;    (system-type (#<module-path-index>))
;;    (tan (#<module-path-index>))
;;    (terminal-port? (#<module-path-index>))
;;    (thread (#<module-path-index>))
;;    (thread-cell-ref (#<module-path-index>))
;;    (thread-cell-set! (#<module-path-index>))
;;    (thread-cell-values? (#<module-path-index>))
;;    (thread-cell? (#<module-path-index>))
;;    (thread-dead-evt (#<module-path-index>))
;;    (thread-dead? (#<module-path-index>))
;;    (thread-group? (#<module-path-index>))
;;    (thread-receive (#<module-path-index>))
;;    (thread-receive-evt (#<module-path-index>))
;;    (thread-resume (#<module-path-index>))
;;    (thread-resume-evt (#<module-path-index>))
;;    (thread-rewind-receive (#<module-path-index>))
;;    (thread-running? (#<module-path-index>))
;;    (thread-send (#<module-path-index>))
;;    (thread-suspend (#<module-path-index>))
;;    (thread-suspend-evt (#<module-path-index>))
;;    (thread-try-receive (#<module-path-index>))
;;    (thread-wait (#<module-path-index>))
;;    (thread/suspend-to-kill (#<module-path-index>))
;;    (thread? (#<module-path-index>))
;;    (time-apply (#<module-path-index>))
;;    (truncate (#<module-path-index>))
;;    (unbox (#<module-path-index>))
;;    (uncaught-exception-handler (#<module-path-index>))
;;    (use-collection-link-paths (#<module-path-index>))
;;    (use-compiled-file-paths (#<module-path-index>))
;;    (use-user-specific-search-paths (#<module-path-index>))
;;    (values (#<module-path-index>))
;;    (variable-reference->empty-namespace (#<module-path-index>))
;;    (variable-reference->module-base-phase (#<module-path-index>))
;;    (variable-reference->module-declaration-inspector (#<module-path-index>))
;;    (variable-reference->module-path-index (#<module-path-index>))
;;    (variable-reference->module-source (#<module-path-index>))
;;    (variable-reference->namespace (#<module-path-index>))
;;    (variable-reference->phase (#<module-path-index>))
;;    (variable-reference->resolved-module-path (#<module-path-index>))
;;    (variable-reference-constant? (#<module-path-index>))
;;    (variable-reference? (#<module-path-index>))
;;    (vector (#<module-path-index>))
;;    (vector->immutable-vector (#<module-path-index>))
;;    (vector->list (#<module-path-index>))
;;    (vector->pseudo-random-generator (#<module-path-index>))
;;    (vector->pseudo-random-generator! (#<module-path-index>))
;;    (vector->values (#<module-path-index>))
;;    (vector-copy! (#<module-path-index>))
;;    (vector-fill! (#<module-path-index>))
;;    (vector-immutable (#<module-path-index>))
;;    (vector-length (#<module-path-index>))
;;    (vector-ref (#<module-path-index>))
;;    (vector-set! (#<module-path-index>))
;;    (vector-set-performance-stats! (#<module-path-index>))
;;    (vector? (#<module-path-index>))
;;    (version (#<module-path-index>))
;;    (void (#<module-path-index>))
;;    (void? (#<module-path-index>))
;;    (weak-box-value (#<module-path-index>))
;;    (weak-box? (#<module-path-index>))
;;    (will-execute (#<module-path-index>))
;;    (will-executor? (#<module-path-index>))
;;    (will-register (#<module-path-index>))
;;    (will-try-execute (#<module-path-index>))
;;    (wrap-evt (#<module-path-index>))
;;    (write (#<module-path-index>))
;;    (write-byte (#<module-path-index>))
;;    (write-bytes (#<module-path-index>))
;;    (write-bytes-avail (#<module-path-index>))
;;    (write-bytes-avail* (#<module-path-index>))
;;    (write-bytes-avail-evt (#<module-path-index>))
;;    (write-bytes-avail/enable-break (#<module-path-index>))
;;    (write-char (#<module-path-index>))
;;    (write-special (#<module-path-index>))
;;    (write-special-avail* (#<module-path-index>))
;;    (write-special-evt (#<module-path-index>))
;;    (write-string (#<module-path-index>))
;;    (zero? (#<module-path-index>))))
;;   (0
;;    (log-info (#<module-path-index>))
;;    (log-error (#<module-path-index>))
;;    (for*/fold (#<module-path-index>))
;;    (define-syntax-rule (#<module-path-index>))
;;    (syntax-rules (#<module-path-index>))
;;    (sort (#<module-path-index>))
;;    (case (#<module-path-index>))
;;    (let/cc (#<module-path-index>))
;;    (for/or (#<module-path-index>))
;;    (for* (#<module-path-index>))
;;    (for/hash (#<module-path-index>))
;;    (struct (#<module-path-index>))
;;    (for*/last (#<module-path-index>))
;;    (except-out (#<module-path-index>))
;;    (rename-in (#<module-path-index>))
;;    (quasisyntax/loc (#<module-path-index>))
;;    #`(#<module-path-index>)
;;    (in-range (#<module-path-index>))
;;    #,@(#<module-path-index>)
;;    #,(#<module-path-index>)
;;    (for*/product (#<module-path-index>))
;;    (for*/fold/derived (#<module-path-index>))
;;    (for*/vector (#<module-path-index>))
;;    (for/vector (#<module-path-index>))
;;    (for/fold (#<module-path-index>))
;;    (rename-out (#<module-path-index>))
;;    (file (#<module-path-index>))
;;    (only-meta-in (#<module-path-index>))
;;    (for/product (#<module-path-index>))
;;    (for/fold/derived (#<module-path-index>))
;;    (module+ (#<module-path-index>))
;;    (for/first (#<module-path-index>))
;;    (combine-in (#<module-path-index>))
;;    (all-from-out (#<module-path-index>))
;;    (let-syntax (#<module-path-index>))
;;    (define-for-syntax (#<module-path-index>))
;;    (define-syntax (#<module-path-index>))
;;    (for*/lists (#<module-path-index>))
;;    (for*/sum (#<module-path-index>))
;;    (all-defined-out (#<module-path-index>))
;;    (syntax-id-rules (#<module-path-index>))
;;    (for-label (#<module-path-index>))
;;    (in-input-port-chars (#<module-path-index>))
;;    (else (#<module-path-index>))
;;    (define-struct/derived (#<module-path-index>))
;;    (log-debug (#<module-path-index>))
;;    (log-warning (#<module-path-index>))
;;    (for/sum (#<module-path-index>))
;;    (log-fatal (#<module-path-index>))
;;    (regexp-match-positions* (#<module-path-index>))
;;    (for/last (#<module-path-index>))
;;    (local-require (#<module-path-index>))
;;    (for*/or (#<module-path-index>))
;;    (define-values-for-syntax (#<module-path-index>))
;;    (#%printing-module-begin (#<module-path-index>))
;;    (#%plain-module-begin (#<module-path-index>))
;;    (#%plain-lambda (#<module-path-index>))
;;    (#%plain-app (#<module-path-index>))
;;    (set!-values (#<module-path-index>))
;;    (only-in (#<module-path-index>))
;;    (in-vector (#<module-path-index>))
;;    (struct-field-index (#<module-path-index>))
;;    (exn:break:terminate (#<module-path-index>))
;;    (exn:break:hang-up (#<module-path-index>))
;;    `(#<module-path-index>)
;;    (quote-syntax/prune (#<module-path-index>))
;;    (struct-copy (#<module-path-index>))
;;    (=> (#<module-path-index>))
;;    (#%top-interaction (#<module-path-index>))
;;    (syntax/loc (#<module-path-index>))
;;    (exn:fail:read (#<module-path-index>))
;;    (exn:fail:syntax:missing-module (#<module-path-index>))
;;    (:do-in (#<module-path-index>))
;;    (except-in (#<module-path-index>))
;;    (prefix-in (#<module-path-index>))
;;    (for (#<module-path-index>))
;;    (for*/first (#<module-path-index>))
;;    (syntax-case (#<module-path-index>))
;;    (do (#<module-path-index>))
;;    (define-logger (#<module-path-index>))
;;    (let-syntaxes (#<module-path-index>))
;;    (lib (#<module-path-index>))
;;    (syntax-case* (#<module-path-index>))
;;    (exn:break (#<module-path-index>))
;;    (exn:fail:user (#<module-path-index>))
;;    (exn:fail:unsupported (#<module-path-index>))
;;    (exn:fail:out-of-memory (#<module-path-index>))
;;    (exn:fail:network:errno (#<module-path-index>))
;;    (exn:fail:network (#<module-path-index>))
;;    (exn:fail:filesystem:missing-module (#<module-path-index>))
;;    (exn:fail:filesystem:errno (#<module-path-index>))
;;    (exn:fail:filesystem:version (#<module-path-index>))
;;    (exn:fail:filesystem:exists (#<module-path-index>))
;;    (exn:fail:filesystem (#<module-path-index>))
;;    (exn:fail:read:non-char (#<module-path-index>))
;;    (exn:fail:read:eof (#<module-path-index>))
;;    (unless (#<module-path-index>))
;;    (and (#<module-path-index>))
;;    (let (#<module-path-index>))
;;    (let* (#<module-path-index>))
;;    (letrec (#<module-path-index>))
;;    (define (#<module-path-index>))
;;    (or (#<module-path-index>))
;;    (parameterize (#<module-path-index>))
;;    (cond (#<module-path-index>))
;;    (when (#<module-path-index>))
;;    (exn:fail:syntax:unbound (#<module-path-index>))
;;    (exn:fail:syntax (#<module-path-index>))
;;    (exn:fail:contract:variable (#<module-path-index>))
;;    (exn:fail:contract:continuation (#<module-path-index>))
;;    (exn:fail:contract:non-fixnum-result (#<module-path-index>))
;;    (exn:fail:contract:divide-by-zero (#<module-path-index>))
;;    (exn:fail:contract:arity (#<module-path-index>))
;;    (exn:fail:contract (#<module-path-index>))
;;    (exn:fail (#<module-path-index>))
;;    (exn (#<module-path-index>))
;;    (regexp-match* (#<module-path-index>))
;;    (regexp-match-peek-positions* (#<module-path-index>))
;;    #'(#<module-path-index>)
;;    (srcloc (#<module-path-index>))
;;    (date* (#<module-path-index>))
;;    (with-handlers* (#<module-path-index>))
;;    (with-handlers (#<module-path-index>))
;;    (date (#<module-path-index>))
;;    (arity-at-least (#<module-path-index>))
;;    (define-namespace-anchor (#<module-path-index>))
;;    (letrec-syntax (#<module-path-index>))
;;    (#%top (#<module-path-index>))
;;    (#%datum (#<module-path-index>))
;;    (#%app (#<module-path-index>))
;;    (letrec-syntaxes+values (#<module-path-index>))
;;    (begin-for-syntax (#<module-path-index>))
;;    (define-syntaxes (#<module-path-index>))
;;    (quote-syntax (#<module-path-index>))
;;    (with-continuation-mark (#<module-path-index>))
;;    ,@(#<module-path-index>)
;;    ,(#<module-path-index>)
;;    (begin0 (#<module-path-index>))
;;    (#%stratified-body (#<module-path-index>))
;;    (begin (#<module-path-index>))
;;    (letrec-values (#<module-path-index>))
;;    (let*-values (#<module-path-index>))
;;    (let-values (#<module-path-index>))
;;    (case-lambda (#<module-path-index>))
;;    (#%expression (#<module-path-index>))
;;    (#%variable-reference (#<module-path-index>))
;;    (set! (#<module-path-index>))
;;    (if (#<module-path-index>))
;;    '(#<module-path-index>)
;;    (define-values (#<module-path-index>))
;;    (λ (#<module-path-index>))
;;    (lambda (#<module-path-index>))
;;    (time (#<module-path-index>))
;;    (for/hasheqv (#<module-path-index>))
;;    (call-with-output-file* (#<module-path-index>))
;;    (for*/and (#<module-path-index>))
;;    (call-with-input-file* (#<module-path-index>))
;;    (for*/hasheqv (#<module-path-index>))
;;    (parameterize-break (#<module-path-index>))
;;    (for/and (#<module-path-index>))
;;    (_ (#<module-path-index>))
;;    (... (#<module-path-index>))
;;    (with-input-from-file (#<module-path-index>))
;;    (with-output-to-file (#<module-path-index>))
;;    (call-with-input-file (#<module-path-index>))
;;    (call-with-output-file (#<module-path-index>))
;;    (for/lists (#<module-path-index>))
;;    (open-input-output-file (#<module-path-index>))
;;    (open-output-file (#<module-path-index>))
;;    (for-meta (#<module-path-index>))
;;    (open-input-file (#<module-path-index>))
;;    (for-template (#<module-path-index>))
;;    (for-syntax (#<module-path-index>))
;;    (prefix-out (#<module-path-index>))
;;    (in-bytes-lines (#<module-path-index>))
;;    (in-lines (#<module-path-index>))
;;    (in-port (#<module-path-index>))
;;    (in-input-port-bytes (#<module-path-index>))
;;    (in-mlist (#<module-path-index>))
;;    (in-list (#<module-path-index>))
;;    (define-struct (#<module-path-index>))
;;    (in-naturals (#<module-path-index>))
;;    (require (#<module-path-index>))
;;    (#%provide (#<module-path-index>))
;;    (#%require (#<module-path-index>))
;;    (#%declare (#<module-path-index>))
;;    (#%module-begin (#<module-path-index>))
;;    (module* (#<module-path-index>))
;;    (module (#<module-path-index>))
;;    (provide (#<module-path-index>))
;;    (protect-out (#<module-path-index>))
;;    (for*/hasheq (#<module-path-index>))
;;    (letrec-syntaxes (#<module-path-index>))
;;    (for*/list (#<module-path-index>))
;;    (combine-out (#<module-path-index>))
;;    (for/list (#<module-path-index>))
;;    (with-syntax (#<module-path-index>))
;;    (relative-in (#<module-path-index>))
;;    (define-sequence-syntax (#<module-path-index>))
;;    (for/hasheq (#<module-path-index>))
;;    (let/ec (#<module-path-index>))
;;    (gen:custom-write (#<module-path-index>))
;;    (in-producer (#<module-path-index>))
;;    (gen:equal+hash (#<module-path-index>))
;;    (submod (#<module-path-index>))
;;    (parameterize* (#<module-path-index>))
;;    (in-value (#<module-path-index>))
;;    (in-indexed (#<module-path-index>))
;;    (in-bytes (#<module-path-index>))
;;    (struct-out (#<module-path-index>))
;;    (in-string (#<module-path-index>))
;;    (for*/hash (#<module-path-index>))
;;    (planet (#<module-path-index>))
;;    (in-directory (#<module-path-index>))
;;    (apply (#<module-path-index>))))
